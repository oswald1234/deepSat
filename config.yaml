config:
  # for testing purpouses
  dry_run: false

  # no_cuda: false to run on GPU if available
  no_cuda: false

  #Tensorboard
  tensorboard: true

  #how often to log to tensorboard in a training epoch, e.g. 0 = never , log for every 100th batch
  log_intervall: 20
  #to reproduce results, note that this only affects pytorch seed
  manual_seed: false

  seed: 1

  # to save model for future inference
  save_model: true

  # where to store the saved model
  savedir: runs/{timeperiod}_{bands}_{timestamp}/saved_model

  # to load model for inference (if true no training is done)
  load_model: false

  # path to saved model
  load_path: runs/timeperiod_bands_timestamp/saved_model/model_epoch_2.pt

# parameters for  training
train:
  epochs: 100

# parameters for Dataset
dataset: # dataset parameters
  # S1 or S2
  source: 'S1'
  kwargs: # to both train and test dataset
    # root to dataset
    # when using Sentinel-2:
    #root_dir: processed-data/dsen_2_256_new_split
    # when using Sentinel-1:
    root_dir: processed-data/sentinel_1_256_split
    
    # Set ONE of following (rgb,rgbsi,rgbr,rgbrsi) to true to train corresponding band.
    # if all is false all sentinel-2 or sentinel-1 bands are used for training
    # only use RGB (sentinel bands 4, 3 and 2)
    rgb: false
    # RGB + spectral indices
    rgbsi: false
    # RGB + Radar
    rgbr: false
    # RGB + Radar + Spectral Indicies
    rgbrsi: true
    # which timeperiod to use
    timeperiod: 1

  train_kwargs: # parameters unique for training dataset
    # specifies which data to use one of [test, train, ,val]
    data: train

  test_kwargs: # parameters unique for test datataset
    # which data to use one of [test, train, ,val]
    data: test

  val_kwargs: # parameters unique for val dataset
    # which data to use one of [test, train, ,val]
    data: val

data_loader: # dataloader parameters
  train_kwargs: # train dataloader parameters
    batch_size: 10
    shuffle: true

  test_kwargs: # test dataloader parameters
    batch_size: 10
    shuffle: false

optimizer: # optimizer parameters
  # learning rate
  lr: 0.0001

loss: # Parameters for loss function
  # loss = weight*crossEntropy+(1-weight)*focalTverskyLoss  (weight [0,1] no weights = None)
  weight: None
  use_focal_tversky: true
  crossEntropy:
    weighted: true
  focalTversky_kwargs: # parameters for focalTverskyLoss function
    # alpha   = Scalar (>= 0)
    # alfa = beta = 1   = Tanimoto coefficient
    # alfa = beta = 0.5 = Sørensen–Dice coefficient
    alpha: 0.7
    # beta : Scalar (>= 0)
    beta: 0.3
    # smooth : Smoothing factor, scalar (have seen 1e-6 and 1 used as values)
    smooth: 1
    # gamma  : Scalar [1,3]
    gamma: 1.3
    # ignore_index
    ignore_index: [0,21,22]

cuda_kwargs: # GPU parameters
  num_workers: 1
  pin_memory: true
